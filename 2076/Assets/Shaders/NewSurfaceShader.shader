Shader "TEST"
{
	Properties
	{
		[NoScaleOffset] Texture2D_FC0D8A1E("Mask", 2D) = "white" {}
Vector1_74F4E271("Twirl Intensity ", Float) = 7.27
Vector1_4182E992("Scale ", Float) = 2
Vector1_BB18E434("Speed ", Float) = 0.5
[HDR]Color_4F618B2B("Color", Color) = (1,0,0.2718983,0)
Vector1_6FB2EAA5("Dissolve ", Float) = 0

	}
		SubShader
{
	Tags
	{
		"RenderPipeline" = "None"
		"RenderType" = "Transparent"
		"Queue" = "Transparent+0"
	}
	Pass
	{
		Tags{"LightMode" = "LightweightForward"}

		// Material options generated by graph

		Blend SrcAlpha OneMinusSrcAlpha, One OneMinusSrcAlpha

		Cull Off

		ZTest LEqual

		ZWrite Off

		HLSLPROGRAM
	// Required to compile gles 2.0 with standard srp library
	#pragma prefer_hlslcc gles
	#pragma exclude_renderers d3d11_9x
	#pragma target 2.0

	// -------------------------------------
	// Lightweight Pipeline keywords
	#pragma multi_compile _ _MAIN_LIGHT_SHADOWS
	#pragma multi_compile _ _MAIN_LIGHT_SHADOWS_CASCADE
	#pragma multi_compile _ _ADDITIONAL_LIGHTS_VERTEX _ADDITIONAL_LIGHTS
	#pragma multi_compile _ _ADDITIONAL_LIGHT_SHADOWS
	#pragma multi_compile _ _SHADOWS_SOFT
	#pragma multi_compile _ _MIXED_LIGHTING_SUBTRACTIVE

	// -------------------------------------
	// Unity defined keywords
	#pragma multi_compile _ DIRLIGHTMAP_COMBINED
	#pragma multi_compile _ LIGHTMAP_ON
	#pragma multi_compile_fog

	//--------------------------------------
	// GPU Instancing
	#pragma multi_compile_instancing

	#pragma vertex vert
	#pragma fragment frag

	// Defines generated by graph

	#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Core.hlsl"
	#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Lighting.hlsl"
	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/UnityInstancing.hlsl"
	#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/ShaderGraphFunctions.hlsl"

	CBUFFER_START(UnityPerMaterial)
	float Vector1_74F4E271;
	float Vector1_4182E992;
	float Vector1_BB18E434;
	float4 Color_4F618B2B;
	float Vector1_6FB2EAA5;
	CBUFFER_END

	TEXTURE2D(Texture2D_FC0D8A1E); SAMPLER(samplerTexture2D_FC0D8A1E); float4 Texture2D_FC0D8A1E_TexelSize;
	SAMPLER(_SampleTexture2D_B7C57FA6_Sampler_3_Linear_Repeat);
	struct VertexDescriptionInputs
	{
		float3 ObjectSpacePosition;
	};

	struct SurfaceDescriptionInputs
	{
		float3 TangentSpaceNormal;
		half4 uv0;
		float3 TimeParameters;
	};


	void Unity_Multiply_float(float A, float B, out float Out)
	{
		Out = A * B;
	}

	void Unity_Twirl_float(float2 UV, float2 Center, float Strength, float2 Offset, out float2 Out)
	{
		float2 delta = UV - Center;
		float angle = Strength * length(delta);
		float x = cos(angle) * delta.x - sin(angle) * delta.y;
		float y = sin(angle) * delta.x + cos(angle) * delta.y;
		Out = float2(x + Center.x + Offset.x, y + Center.y + Offset.y);
	}


inline float2 Unity_Voronoi_RandomVector_float(float2 UV, float offset)
{
	float2x2 m = float2x2(15.27, 47.63, 99.41, 89.98);
	UV = frac(sin(mul(UV, m)) * 46839.32);
	return float2(sin(UV.y*+offset)*0.5 + 0.5, cos(UV.x*offset)*0.5 + 0.5);
}

	void Unity_Voronoi_float(float2 UV, float AngleOffset, float CellDensity, out float Out, out float Cells)
	{
		float2 g = floor(UV * CellDensity);
		float2 f = frac(UV * CellDensity);
		float t = 8.0;
		float3 res = float3(8.0, 0.0, 0.0);

		for (int y = -1; y <= 1; y++)
		{
			for (int x = -1; x <= 1; x++)
			{
				float2 lattice = float2(x,y);
				float2 offset = Unity_Voronoi_RandomVector_float(lattice + g, AngleOffset);
				float d = distance(lattice + offset, f);

				if (d < res.x)
				{
					res = float3(d, offset.x, offset.y);
					Out = res.x;
					Cells = res.y;
				}
			}
		}
	}

	void Unity_Power_float(float A, float B, out float Out)
	{
		Out = pow(A, B);
	}

	void Unity_Multiply_float(float4 A, float4 B, out float4 Out)
	{
		Out = A * B;
	}

	struct VertexDescription
	{
		float3 Position;
	};

	VertexDescription PopulateVertexData(VertexDescriptionInputs IN)
	{
		VertexDescription description = (VertexDescription)0;
		description.Position = IN.ObjectSpacePosition;
		return description;
	}

	struct SurfaceDescription
	{
		float3 Albedo;
		float3 Normal;
		float3 Emission;
		float Metallic;
		float Smoothness;
		float Occlusion;
		float Alpha;
		float AlphaClipThreshold;
	};

	SurfaceDescription PopulateSurfaceData(SurfaceDescriptionInputs IN)
	{
		SurfaceDescription surface = (SurfaceDescription)0;
		float4 _Property_50B20D45_Out_0 = Color_4F618B2B;
		float4 _SampleTexture2D_B7C57FA6_RGBA_0 = SAMPLE_TEXTURE2D(Texture2D_FC0D8A1E, samplerTexture2D_FC0D8A1E, IN.uv0.xy);
		float _SampleTexture2D_B7C57FA6_R_4 = _SampleTexture2D_B7C57FA6_RGBA_0.r;
		float _SampleTexture2D_B7C57FA6_G_5 = _SampleTexture2D_B7C57FA6_RGBA_0.g;
		float _SampleTexture2D_B7C57FA6_B_6 = _SampleTexture2D_B7C57FA6_RGBA_0.b;
		float _SampleTexture2D_B7C57FA6_A_7 = _SampleTexture2D_B7C57FA6_RGBA_0.a;
		float _Property_73149802_Out_0 = Vector1_74F4E271;
		float _Property_2CFDFD71_Out_0 = Vector1_BB18E434;
		float _Multiply_8FB1196F_Out_2;
		Unity_Multiply_float(_Property_2CFDFD71_Out_0, IN.TimeParameters.x, _Multiply_8FB1196F_Out_2);
		float2 _Twirl_2C42DB4_Out_4;
		Unity_Twirl_float(IN.uv0.xy, float2 (0.5, 0.5), _Property_73149802_Out_0, (_Multiply_8FB1196F_Out_2.xx), _Twirl_2C42DB4_Out_4);
		float _Property_4B2CC386_Out_0 = Vector1_4182E992;
		float _Voronoi_DD250263_Out_3;
		float _Voronoi_DD250263_Cells_4;
		Unity_Voronoi_float(_Twirl_2C42DB4_Out_4, 2, _Property_4B2CC386_Out_0, _Voronoi_DD250263_Out_3, _Voronoi_DD250263_Cells_4);
		float _Power_DE91011A_Out_2;
		Unity_Power_float(_Voronoi_DD250263_Cells_4, _Voronoi_DD250263_Out_3, _Power_DE91011A_Out_2);
		float4 _Multiply_6A6BEFF8_Out_2;
		Unity_Multiply_float(_SampleTexture2D_B7C57FA6_RGBA_0, (_Power_DE91011A_Out_2.xxxx), _Multiply_6A6BEFF8_Out_2);
		float4 _Multiply_EFDBC6F2_Out_2;
		Unity_Multiply_float(_Property_50B20D45_Out_0, _Multiply_6A6BEFF8_Out_2, _Multiply_EFDBC6F2_Out_2);
		surface.Albedo = IsGammaSpace() ? float3(1, 1, 1) : SRGBToLinear(float3(1, 1, 1));
		surface.Normal = IN.TangentSpaceNormal;
		surface.Emission = (_Multiply_EFDBC6F2_Out_2.xyz);
		surface.Metallic = 0;
		surface.Smoothness = 0.5;
		surface.Occlusion = 1;
		surface.Alpha = (_Multiply_EFDBC6F2_Out_2).x;
		surface.AlphaClipThreshold = 0.5;
		return surface;
	}

	struct GraphVertexInput
	{
		float4 vertex : POSITION;
		float3 normal : NORMAL;
		float4 tangent : TANGENT;
		float4 texcoord0 : TEXCOORD0;
		float4 texcoord1 : TEXCOORD1;
		UNITY_VERTEX_INPUT_INSTANCE_ID
	};


	struct GraphVertexOutput
	{
		float4 clipPos                : SV_POSITION;
		DECLARE_LIGHTMAP_OR_SH(lightmapUV, vertexSH, 0);
		half4 fogFactorAndVertexLight : TEXCOORD1; // x: fogFactor, yzw: vertex light
		float4 shadowCoord            : TEXCOORD2;

		// Interpolators defined by graph
		float3 WorldSpacePosition : TEXCOORD3;
		float3 WorldSpaceNormal : TEXCOORD4;
		float3 WorldSpaceTangent : TEXCOORD5;
		float3 WorldSpaceBiTangent : TEXCOORD6;
		float3 WorldSpaceViewDirection : TEXCOORD7;
		half4 uv0 : TEXCOORD8;
		half4 uv1 : TEXCOORD9;

		UNITY_VERTEX_INPUT_INSTANCE_ID
		UNITY_VERTEX_OUTPUT_STEREO
	};

	GraphVertexOutput vert(GraphVertexInput v)
	{
		GraphVertexOutput o = (GraphVertexOutput)0;
		UNITY_SETUP_INSTANCE_ID(v);
		UNITY_TRANSFER_INSTANCE_ID(v, o);
		UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

		// Vertex transformations performed by graph
		float3 WorldSpacePosition = mul(UNITY_MATRIX_M,v.vertex).xyz;
		float3 WorldSpaceNormal = normalize(mul(v.normal,(float3x3)UNITY_MATRIX_I_M));
		float3 WorldSpaceTangent = normalize(mul((float3x3)UNITY_MATRIX_M,v.tangent.xyz));
		float3 WorldSpaceBiTangent = cross(WorldSpaceNormal, WorldSpaceTangent.xyz) * v.tangent.w;
		float3 WorldSpaceViewDirection = _WorldSpaceCameraPos.xyz - mul(GetObjectToWorldMatrix(), float4(v.vertex.xyz, 1.0)).xyz;
		float4 uv0 = v.texcoord0;
		float4 uv1 = v.texcoord1;
		float3 ObjectSpacePosition = mul(UNITY_MATRIX_I_M,float4(WorldSpacePosition,1.0)).xyz;

		VertexDescriptionInputs vdi = (VertexDescriptionInputs)0;

		// Vertex description inputs defined by graph
		vdi.ObjectSpacePosition = ObjectSpacePosition;

		VertexDescription vd = PopulateVertexData(vdi);
		v.vertex.xyz = vd.Position;

		// Vertex shader outputs defined by graph
		o.WorldSpacePosition = WorldSpacePosition;
		o.WorldSpaceNormal = WorldSpaceNormal;
		o.WorldSpaceTangent = WorldSpaceTangent;
		o.WorldSpaceBiTangent = WorldSpaceBiTangent;
		o.WorldSpaceViewDirection = WorldSpaceViewDirection;
		o.uv0 = uv0;
		o.uv1 = uv1;

		float3 lwWNormal = TransformObjectToWorldNormal(v.normal);

		VertexPositionInputs vertexInput = GetVertexPositionInputs(v.vertex.xyz);

		// We either sample GI from lightmap or SH.
		// Lightmap UV and vertex SH coefficients use the same interpolator ("float2 lightmapUV" for lightmap or "half3 vertexSH" for SH)
		// see DECLARE_LIGHTMAP_OR_SH macro.
		// The following funcions initialize the correct variable with correct data
		OUTPUT_LIGHTMAP_UV(v.texcoord1, unity_LightmapST, o.lightmapUV);
		OUTPUT_SH(lwWNormal, o.vertexSH);

		half3 vertexLight = VertexLighting(vertexInput.positionWS, lwWNormal);
		half fogFactor = ComputeFogFactor(vertexInput.positionCS.z);
		o.fogFactorAndVertexLight = half4(fogFactor, vertexLight);
		o.clipPos = vertexInput.positionCS;

	#ifdef _MAIN_LIGHT_SHADOWS
		o.shadowCoord = GetShadowCoord(vertexInput);
	#endif
		return o;
	}

	half4 frag(GraphVertexOutput IN) : SV_Target
	{
		UNITY_SETUP_INSTANCE_ID(IN);
		UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);

		// Pixel transformations performed by graph
		float3 WorldSpacePosition = IN.WorldSpacePosition;
		float3 WorldSpaceNormal = IN.WorldSpaceNormal;
		float3 WorldSpaceTangent = IN.WorldSpaceTangent;
		float3 WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
		float3 WorldSpaceViewDirection = IN.WorldSpaceViewDirection;
		float3x3 tangentSpaceTransform = float3x3(WorldSpaceTangent,WorldSpaceBiTangent,WorldSpaceNormal);
		float4 uv0 = IN.uv0;
		float4 uv1 = IN.uv1;
		float3 TangentSpaceNormal = mul(WorldSpaceNormal,(float3x3)tangentSpaceTransform).xyz;

		SurfaceDescriptionInputs surfaceInput = (SurfaceDescriptionInputs)0;

		// Surface description inputs defined by graph
		surfaceInput.TangentSpaceNormal = TangentSpaceNormal;
		surfaceInput.uv0 = uv0;
		surfaceInput.TimeParameters = _TimeParameters.xyz;

		SurfaceDescription surf = PopulateSurfaceData(surfaceInput);

		float3 Albedo = float3(0.5, 0.5, 0.5);
		float3 Specular = float3(0, 0, 0);
		float Metallic = 1;
		float3 Normal = float3(0, 0, 1);
		float3 Emission = 0;
		float Smoothness = 0.5;
		float Occlusion = 1;
		float Alpha = 1;
		float AlphaClipThreshold = 0;

		// Surface description remap performed by graph
		Albedo = surf.Albedo;
		Normal = surf.Normal;
		Emission = surf.Emission;
		Metallic = surf.Metallic;
		Smoothness = surf.Smoothness;
		Occlusion = surf.Occlusion;
		Alpha = surf.Alpha;
		AlphaClipThreshold = surf.AlphaClipThreshold;

		InputData inputData;
		inputData.positionWS = WorldSpacePosition;

#ifdef _NORMALMAP
		inputData.normalWS = normalize(TransformTangentToWorld(Normal, half3x3(WorldSpaceTangent, WorldSpaceBiTangent, WorldSpaceNormal)));
#else
	#if !SHADER_HINT_NICE_QUALITY
		inputData.normalWS = WorldSpaceNormal;
	#else
		inputData.normalWS = normalize(WorldSpaceNormal);
	#endif
#endif

#if !SHADER_HINT_NICE_QUALITY
		// viewDirection should be normalized here, but we avoid doing it as it's close enough and we save some ALU.
		inputData.viewDirectionWS = WorldSpaceViewDirection;
#else
		inputData.viewDirectionWS = normalize(WorldSpaceViewDirection);
#endif

		inputData.shadowCoord = IN.shadowCoord;

		inputData.fogCoord = IN.fogFactorAndVertexLight.x;
		inputData.vertexLighting = IN.fogFactorAndVertexLight.yzw;
		inputData.bakedGI = SAMPLE_GI(IN.lightmapUV, IN.vertexSH, inputData.normalWS);

		half4 color = LightweightFragmentPBR(
			inputData,
			Albedo,
			Metallic,
			Specular,
			Smoothness,
			Occlusion,
			Emission,
			Alpha);

		// Computes fog factor per-vertex
		color.rgb = MixFog(color.rgb, IN.fogFactorAndVertexLight.x);

#if _AlphaClip
		clip(Alpha - AlphaClipThreshold);
#endif
		return color;
	}

	ENDHLSL
}
Pass
{
	Name "ShadowCaster"
	Tags{"LightMode" = "ShadowCaster"}

	ZWrite On ZTest LEqual

		// Material options generated by graph
		Cull Off

		HLSLPROGRAM
		// Required to compile gles 2.0 with standard srp library
		#pragma prefer_hlslcc gles
		#pragma exclude_renderers d3d11_9x
		#pragma target 2.0

		//--------------------------------------
		// GPU Instancing
		#pragma multi_compile_instancing

		#pragma vertex ShadowPassVertex
		#pragma fragment ShadowPassFragment

		// Defines generated by graph

		#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Core.hlsl"
		#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Lighting.hlsl"
		#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/ShaderGraphFunctions.hlsl"
		#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"

		CBUFFER_START(UnityPerMaterial)
		float Vector1_74F4E271;
		float Vector1_4182E992;
		float Vector1_BB18E434;
		float4 Color_4F618B2B;
		float Vector1_6FB2EAA5;
		CBUFFER_END

		TEXTURE2D(Texture2D_FC0D8A1E); SAMPLER(samplerTexture2D_FC0D8A1E); float4 Texture2D_FC0D8A1E_TexelSize;
		SAMPLER(_SampleTexture2D_B7C57FA6_Sampler_3_Linear_Repeat);
		struct VertexDescriptionInputs
		{
			float3 ObjectSpacePosition;
		};

		struct SurfaceDescriptionInputs
		{
			float3 TangentSpaceNormal;
			half4 uv0;
			float3 TimeParameters;
		};


		void Unity_Multiply_float(float A, float B, out float Out)
		{
			Out = A * B;
		}

		void Unity_Twirl_float(float2 UV, float2 Center, float Strength, float2 Offset, out float2 Out)
		{
			float2 delta = UV - Center;
			float angle = Strength * length(delta);
			float x = cos(angle) * delta.x - sin(angle) * delta.y;
			float y = sin(angle) * delta.x + cos(angle) * delta.y;
			Out = float2(x + Center.x + Offset.x, y + Center.y + Offset.y);
		}


	inline float2 Unity_Voronoi_RandomVector_float(float2 UV, float offset)
	{
		float2x2 m = float2x2(15.27, 47.63, 99.41, 89.98);
		UV = frac(sin(mul(UV, m)) * 46839.32);
		return float2(sin(UV.y*+offset)*0.5 + 0.5, cos(UV.x*offset)*0.5 + 0.5);
	}

		void Unity_Voronoi_float(float2 UV, float AngleOffset, float CellDensity, out float Out, out float Cells)
		{
			float2 g = floor(UV * CellDensity);
			float2 f = frac(UV * CellDensity);
			float t = 8.0;
			float3 res = float3(8.0, 0.0, 0.0);

			for (int y = -1; y <= 1; y++)
			{
				for (int x = -1; x <= 1; x++)
				{
					float2 lattice = float2(x,y);
					float2 offset = Unity_Voronoi_RandomVector_float(lattice + g, AngleOffset);
					float d = distance(lattice + offset, f);

					if (d < res.x)
					{
						res = float3(d, offset.x, offset.y);
						Out = res.x;
						Cells = res.y;
					}
				}
			}
		}

		void Unity_Power_float(float A, float B, out float Out)
		{
			Out = pow(A, B);
		}

		void Unity_Multiply_float(float4 A, float4 B, out float4 Out)
		{
			Out = A * B;
		}

		struct VertexDescription
		{
			float3 Position;
		};

		VertexDescription PopulateVertexData(VertexDescriptionInputs IN)
		{
			VertexDescription description = (VertexDescription)0;
			description.Position = IN.ObjectSpacePosition;
			return description;
		}

		struct SurfaceDescription
		{
			float3 Albedo;
			float3 Emission;
			float Alpha;
			float AlphaClipThreshold;
		};

		SurfaceDescription PopulateSurfaceData(SurfaceDescriptionInputs IN)
		{
			SurfaceDescription surface = (SurfaceDescription)0;
			float4 _Property_50B20D45_Out_0 = Color_4F618B2B;
			float4 _SampleTexture2D_B7C57FA6_RGBA_0 = SAMPLE_TEXTURE2D(Texture2D_FC0D8A1E, samplerTexture2D_FC0D8A1E, IN.uv0.xy);
			float _SampleTexture2D_B7C57FA6_R_4 = _SampleTexture2D_B7C57FA6_RGBA_0.r;
			float _SampleTexture2D_B7C57FA6_G_5 = _SampleTexture2D_B7C57FA6_RGBA_0.g;
			float _SampleTexture2D_B7C57FA6_B_6 = _SampleTexture2D_B7C57FA6_RGBA_0.b;
			float _SampleTexture2D_B7C57FA6_A_7 = _SampleTexture2D_B7C57FA6_RGBA_0.a;
			float _Property_73149802_Out_0 = Vector1_74F4E271;
			float _Property_2CFDFD71_Out_0 = Vector1_BB18E434;
			float _Multiply_8FB1196F_Out_2;
			Unity_Multiply_float(_Property_2CFDFD71_Out_0, IN.TimeParameters.x, _Multiply_8FB1196F_Out_2);
			float2 _Twirl_2C42DB4_Out_4;
			Unity_Twirl_float(IN.uv0.xy, float2 (0.5, 0.5), _Property_73149802_Out_0, (_Multiply_8FB1196F_Out_2.xx), _Twirl_2C42DB4_Out_4);
			float _Property_4B2CC386_Out_0 = Vector1_4182E992;
			float _Voronoi_DD250263_Out_3;
			float _Voronoi_DD250263_Cells_4;
			Unity_Voronoi_float(_Twirl_2C42DB4_Out_4, 2, _Property_4B2CC386_Out_0, _Voronoi_DD250263_Out_3, _Voronoi_DD250263_Cells_4);
			float _Power_DE91011A_Out_2;
			Unity_Power_float(_Voronoi_DD250263_Cells_4, _Voronoi_DD250263_Out_3, _Power_DE91011A_Out_2);
			float4 _Multiply_6A6BEFF8_Out_2;
			Unity_Multiply_float(_SampleTexture2D_B7C57FA6_RGBA_0, (_Power_DE91011A_Out_2.xxxx), _Multiply_6A6BEFF8_Out_2);
			float4 _Multiply_EFDBC6F2_Out_2;
			Unity_Multiply_float(_Property_50B20D45_Out_0, _Multiply_6A6BEFF8_Out_2, _Multiply_EFDBC6F2_Out_2);
			surface.Albedo = IsGammaSpace() ? float3(1, 1, 1) : SRGBToLinear(float3(1, 1, 1));
			surface.Emission = (_Multiply_EFDBC6F2_Out_2.xyz);
			surface.Alpha = (_Multiply_EFDBC6F2_Out_2).x;
			surface.AlphaClipThreshold = 0.5;
			return surface;
		}

		struct GraphVertexInput
		{
			float4 vertex : POSITION;
			float3 normal : NORMAL;
			float4 tangent : TANGENT;
			float4 texcoord0 : TEXCOORD0;
			float4 texcoord1 : TEXCOORD1;
			UNITY_VERTEX_INPUT_INSTANCE_ID
		};


		struct VertexOutput
		{
			float2 uv           : TEXCOORD0;
			float4 clipPos      : SV_POSITION;
			// Interpolators defined by graph
			float3 WorldSpacePosition : TEXCOORD3;
			float3 WorldSpaceNormal : TEXCOORD4;
			float3 WorldSpaceTangent : TEXCOORD5;
			float3 WorldSpaceBiTangent : TEXCOORD6;
			float3 WorldSpaceViewDirection : TEXCOORD7;
			half4 uv0 : TEXCOORD8;
			half4 uv1 : TEXCOORD9;

			UNITY_VERTEX_INPUT_INSTANCE_ID
		};

		float3 _LightDirection;

		VertexOutput ShadowPassVertex(GraphVertexInput v)
		{
			VertexOutput o;
			UNITY_SETUP_INSTANCE_ID(v);
			UNITY_TRANSFER_INSTANCE_ID(v, o);

			// Vertex transformations performed by graph
			float3 WorldSpacePosition = mul(UNITY_MATRIX_M,v.vertex).xyz;
			float3 WorldSpaceNormal = normalize(mul(v.normal,(float3x3)UNITY_MATRIX_I_M));
			float3 WorldSpaceTangent = normalize(mul((float3x3)UNITY_MATRIX_M,v.tangent.xyz));
			float3 WorldSpaceBiTangent = cross(WorldSpaceNormal, WorldSpaceTangent.xyz) * v.tangent.w;
			float3 WorldSpaceViewDirection = _WorldSpaceCameraPos.xyz - mul(GetObjectToWorldMatrix(), float4(v.vertex.xyz, 1.0)).xyz;
			float4 uv0 = v.texcoord0;
			float4 uv1 = v.texcoord1;
			float3 ObjectSpacePosition = mul(UNITY_MATRIX_I_M,float4(WorldSpacePosition,1.0)).xyz;

			VertexDescriptionInputs vdi = (VertexDescriptionInputs)0;

			// Vertex description inputs defined by graph
			vdi.ObjectSpacePosition = ObjectSpacePosition;

			VertexDescription vd = PopulateVertexData(vdi);
			v.vertex.xyz = vd.Position;

			// Vertex shader outputs defined by graph
			o.WorldSpacePosition = WorldSpacePosition;
			o.WorldSpaceNormal = WorldSpaceNormal;
			o.WorldSpaceTangent = WorldSpaceTangent;
			o.WorldSpaceBiTangent = WorldSpaceBiTangent;
			o.WorldSpaceViewDirection = WorldSpaceViewDirection;
			o.uv0 = uv0;
			o.uv1 = uv1;


			float3 positionWS = TransformObjectToWorld(v.vertex.xyz);
			float3 normalWS = TransformObjectToWorldNormal(v.normal);

			float4 clipPos = TransformWorldToHClip(ApplyShadowBias(positionWS, normalWS, _LightDirection));

		#if UNITY_REVERSED_Z
			clipPos.z = min(clipPos.z, clipPos.w * UNITY_NEAR_CLIP_VALUE);
		#else
			clipPos.z = max(clipPos.z, clipPos.w * UNITY_NEAR_CLIP_VALUE);
		#endif
			o.clipPos = clipPos;

			return o;
		}

		half4 ShadowPassFragment(VertexOutput IN) : SV_TARGET
		{
			UNITY_SETUP_INSTANCE_ID(IN);

		// Pixel transformations performed by graph
		float3 WorldSpacePosition = IN.WorldSpacePosition;
		float3 WorldSpaceNormal = IN.WorldSpaceNormal;
		float3 WorldSpaceTangent = IN.WorldSpaceTangent;
		float3 WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
		float3 WorldSpaceViewDirection = IN.WorldSpaceViewDirection;
		float3x3 tangentSpaceTransform = float3x3(WorldSpaceTangent,WorldSpaceBiTangent,WorldSpaceNormal);
		float4 uv0 = IN.uv0;
		float4 uv1 = IN.uv1;
		float3 TangentSpaceNormal = mul(WorldSpaceNormal,(float3x3)tangentSpaceTransform).xyz;

		SurfaceDescriptionInputs surfaceInput = (SurfaceDescriptionInputs)0;

		// Surface description inputs defined by graph
		surfaceInput.TangentSpaceNormal = TangentSpaceNormal;
		surfaceInput.uv0 = uv0;
		surfaceInput.TimeParameters = _TimeParameters.xyz;

		SurfaceDescription surf = PopulateSurfaceData(surfaceInput);

		float3 Albedo = float3(0.5, 0.5, 0.5);
		float3 Emission = 0;
		float Alpha = 1;
		float AlphaClipThreshold = 0;

		// Surface description remap performed by graph
		Albedo = surf.Albedo;
		Emission = surf.Emission;
		Alpha = surf.Alpha;
		AlphaClipThreshold = surf.AlphaClipThreshold;

 #if _AlphaClip
		clip(Alpha - AlphaClipThreshold);
#endif
		return 0;
	}

	ENDHLSL
}

Pass
{
	Name "DepthOnly"
	Tags{"LightMode" = "DepthOnly"}

	ZWrite On
	ColorMask 0

		// Material options generated by graph
		Cull Off

		HLSLPROGRAM
		// Required to compile gles 2.0 with standard srp library
		#pragma prefer_hlslcc gles
		#pragma exclude_renderers d3d11_9x
		#pragma target 2.0

		//--------------------------------------
		// GPU Instancing
		#pragma multi_compile_instancing

		#pragma vertex vert
		#pragma fragment frag

		// Defines generated by graph

		#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Core.hlsl"
		#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Lighting.hlsl"
		#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/ShaderGraphFunctions.hlsl"
		#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"

		CBUFFER_START(UnityPerMaterial)
		float Vector1_74F4E271;
		float Vector1_4182E992;
		float Vector1_BB18E434;
		float4 Color_4F618B2B;
		float Vector1_6FB2EAA5;
		CBUFFER_END

		TEXTURE2D(Texture2D_FC0D8A1E); SAMPLER(samplerTexture2D_FC0D8A1E); float4 Texture2D_FC0D8A1E_TexelSize;
		SAMPLER(_SampleTexture2D_B7C57FA6_Sampler_3_Linear_Repeat);
		struct VertexDescriptionInputs
		{
			float3 ObjectSpacePosition;
		};

		struct SurfaceDescriptionInputs
		{
			float3 TangentSpaceNormal;
			half4 uv0;
			float3 TimeParameters;
		};


		void Unity_Multiply_float(float A, float B, out float Out)
		{
			Out = A * B;
		}

		void Unity_Twirl_float(float2 UV, float2 Center, float Strength, float2 Offset, out float2 Out)
		{
			float2 delta = UV - Center;
			float angle = Strength * length(delta);
			float x = cos(angle) * delta.x - sin(angle) * delta.y;
			float y = sin(angle) * delta.x + cos(angle) * delta.y;
			Out = float2(x + Center.x + Offset.x, y + Center.y + Offset.y);
		}


	inline float2 Unity_Voronoi_RandomVector_float(float2 UV, float offset)
	{
		float2x2 m = float2x2(15.27, 47.63, 99.41, 89.98);
		UV = frac(sin(mul(UV, m)) * 46839.32);
		return float2(sin(UV.y*+offset)*0.5 + 0.5, cos(UV.x*offset)*0.5 + 0.5);
	}

		void Unity_Voronoi_float(float2 UV, float AngleOffset, float CellDensity, out float Out, out float Cells)
		{
			float2 g = floor(UV * CellDensity);
			float2 f = frac(UV * CellDensity);
			float t = 8.0;
			float3 res = float3(8.0, 0.0, 0.0);

			for (int y = -1; y <= 1; y++)
			{
				for (int x = -1; x <= 1; x++)
				{
					float2 lattice = float2(x,y);
					float2 offset = Unity_Voronoi_RandomVector_float(lattice + g, AngleOffset);
					float d = distance(lattice + offset, f);

					if (d < res.x)
					{
						res = float3(d, offset.x, offset.y);
						Out = res.x;
						Cells = res.y;
					}
				}
			}
		}

		void Unity_Power_float(float A, float B, out float Out)
		{
			Out = pow(A, B);
		}

		void Unity_Multiply_float(float4 A, float4 B, out float4 Out)
		{
			Out = A * B;
		}

		struct VertexDescription
		{
			float3 Position;
		};

		VertexDescription PopulateVertexData(VertexDescriptionInputs IN)
		{
			VertexDescription description = (VertexDescription)0;
			description.Position = IN.ObjectSpacePosition;
			return description;
		}

		struct SurfaceDescription
		{
			float3 Albedo;
			float3 Emission;
			float Alpha;
			float AlphaClipThreshold;
		};

		SurfaceDescription PopulateSurfaceData(SurfaceDescriptionInputs IN)
		{
			SurfaceDescription surface = (SurfaceDescription)0;
			float4 _Property_50B20D45_Out_0 = Color_4F618B2B;
			float4 _SampleTexture2D_B7C57FA6_RGBA_0 = SAMPLE_TEXTURE2D(Texture2D_FC0D8A1E, samplerTexture2D_FC0D8A1E, IN.uv0.xy);
			float _SampleTexture2D_B7C57FA6_R_4 = _SampleTexture2D_B7C57FA6_RGBA_0.r;
			float _SampleTexture2D_B7C57FA6_G_5 = _SampleTexture2D_B7C57FA6_RGBA_0.g;
			float _SampleTexture2D_B7C57FA6_B_6 = _SampleTexture2D_B7C57FA6_RGBA_0.b;
			float _SampleTexture2D_B7C57FA6_A_7 = _SampleTexture2D_B7C57FA6_RGBA_0.a;
			float _Property_73149802_Out_0 = Vector1_74F4E271;
			float _Property_2CFDFD71_Out_0 = Vector1_BB18E434;
			float _Multiply_8FB1196F_Out_2;
			Unity_Multiply_float(_Property_2CFDFD71_Out_0, IN.TimeParameters.x, _Multiply_8FB1196F_Out_2);
			float2 _Twirl_2C42DB4_Out_4;
			Unity_Twirl_float(IN.uv0.xy, float2 (0.5, 0.5), _Property_73149802_Out_0, (_Multiply_8FB1196F_Out_2.xx), _Twirl_2C42DB4_Out_4);
			float _Property_4B2CC386_Out_0 = Vector1_4182E992;
			float _Voronoi_DD250263_Out_3;
			float _Voronoi_DD250263_Cells_4;
			Unity_Voronoi_float(_Twirl_2C42DB4_Out_4, 2, _Property_4B2CC386_Out_0, _Voronoi_DD250263_Out_3, _Voronoi_DD250263_Cells_4);
			float _Power_DE91011A_Out_2;
			Unity_Power_float(_Voronoi_DD250263_Cells_4, _Voronoi_DD250263_Out_3, _Power_DE91011A_Out_2);
			float4 _Multiply_6A6BEFF8_Out_2;
			Unity_Multiply_float(_SampleTexture2D_B7C57FA6_RGBA_0, (_Power_DE91011A_Out_2.xxxx), _Multiply_6A6BEFF8_Out_2);
			float4 _Multiply_EFDBC6F2_Out_2;
			Unity_Multiply_float(_Property_50B20D45_Out_0, _Multiply_6A6BEFF8_Out_2, _Multiply_EFDBC6F2_Out_2);
			surface.Albedo = IsGammaSpace() ? float3(1, 1, 1) : SRGBToLinear(float3(1, 1, 1));
			surface.Emission = (_Multiply_EFDBC6F2_Out_2.xyz);
			surface.Alpha = (_Multiply_EFDBC6F2_Out_2).x;
			surface.AlphaClipThreshold = 0.5;
			return surface;
		}

		struct GraphVertexInput
		{
			float4 vertex : POSITION;
			float3 normal : NORMAL;
			float4 tangent : TANGENT;
			float4 texcoord0 : TEXCOORD0;
			float4 texcoord1 : TEXCOORD1;
			UNITY_VERTEX_INPUT_INSTANCE_ID
		};


		struct VertexOutput
		{
			float2 uv           : TEXCOORD0;
			float4 clipPos      : SV_POSITION;
			// Interpolators defined by graph
			float3 WorldSpacePosition : TEXCOORD3;
			float3 WorldSpaceNormal : TEXCOORD4;
			float3 WorldSpaceTangent : TEXCOORD5;
			float3 WorldSpaceBiTangent : TEXCOORD6;
			float3 WorldSpaceViewDirection : TEXCOORD7;
			half4 uv0 : TEXCOORD8;
			half4 uv1 : TEXCOORD9;

			UNITY_VERTEX_INPUT_INSTANCE_ID
			UNITY_VERTEX_OUTPUT_STEREO
		};

		VertexOutput vert(GraphVertexInput v)
		{
			VertexOutput o = (VertexOutput)0;
			UNITY_SETUP_INSTANCE_ID(v);
			UNITY_TRANSFER_INSTANCE_ID(v, o);
			UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

			// Vertex transformations performed by graph
			float3 WorldSpacePosition = mul(UNITY_MATRIX_M,v.vertex).xyz;
			float3 WorldSpaceNormal = normalize(mul(v.normal,(float3x3)UNITY_MATRIX_I_M));
			float3 WorldSpaceTangent = normalize(mul((float3x3)UNITY_MATRIX_M,v.tangent.xyz));
			float3 WorldSpaceBiTangent = cross(WorldSpaceNormal, WorldSpaceTangent.xyz) * v.tangent.w;
			float3 WorldSpaceViewDirection = _WorldSpaceCameraPos.xyz - mul(GetObjectToWorldMatrix(), float4(v.vertex.xyz, 1.0)).xyz;
			float4 uv0 = v.texcoord0;
			float4 uv1 = v.texcoord1;
			float3 ObjectSpacePosition = mul(UNITY_MATRIX_I_M,float4(WorldSpacePosition,1.0)).xyz;

			VertexDescriptionInputs vdi = (VertexDescriptionInputs)0;

			// Vertex description inputs defined by graph
			vdi.ObjectSpacePosition = ObjectSpacePosition;

			VertexDescription vd = PopulateVertexData(vdi);
			v.vertex.xyz = vd.Position;

			// Vertex shader outputs defined by graph
			o.WorldSpacePosition = WorldSpacePosition;
			o.WorldSpaceNormal = WorldSpaceNormal;
			o.WorldSpaceTangent = WorldSpaceTangent;
			o.WorldSpaceBiTangent = WorldSpaceBiTangent;
			o.WorldSpaceViewDirection = WorldSpaceViewDirection;
			o.uv0 = uv0;
			o.uv1 = uv1;

			o.clipPos = TransformObjectToHClip(v.vertex.xyz);
			return o;
		}

		half4 frag(VertexOutput IN) : SV_TARGET
		{
			UNITY_SETUP_INSTANCE_ID(IN);
			UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);

			// Pixel transformations performed by graph
			float3 WorldSpacePosition = IN.WorldSpacePosition;
			float3 WorldSpaceNormal = IN.WorldSpaceNormal;
			float3 WorldSpaceTangent = IN.WorldSpaceTangent;
			float3 WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
			float3 WorldSpaceViewDirection = IN.WorldSpaceViewDirection;
			float3x3 tangentSpaceTransform = float3x3(WorldSpaceTangent,WorldSpaceBiTangent,WorldSpaceNormal);
			float4 uv0 = IN.uv0;
			float4 uv1 = IN.uv1;
			float3 TangentSpaceNormal = mul(WorldSpaceNormal,(float3x3)tangentSpaceTransform).xyz;

			SurfaceDescriptionInputs surfaceInput = (SurfaceDescriptionInputs)0;

			// Surface description inputs defined by graph
			surfaceInput.TangentSpaceNormal = TangentSpaceNormal;
			surfaceInput.uv0 = uv0;
			surfaceInput.TimeParameters = _TimeParameters.xyz;

			SurfaceDescription surf = PopulateSurfaceData(surfaceInput);

			float3 Albedo = float3(0.5, 0.5, 0.5);
			float3 Emission = 0;
			float Alpha = 1;
			float AlphaClipThreshold = 0;

			// Surface description remap performed by graph
			Albedo = surf.Albedo;
			Emission = surf.Emission;
			Alpha = surf.Alpha;
			AlphaClipThreshold = surf.AlphaClipThreshold;

	 #if _AlphaClip
			clip(Alpha - AlphaClipThreshold);
	#endif
			return 0;
		}
		ENDHLSL
	}

		// This pass it not used during regular rendering, only for lightmap baking.
		Pass
		{
			Name "Meta"
			Tags{"LightMode" = "Meta"}

			Cull Off

			HLSLPROGRAM
			// Required to compile gles 2.0 with standard srp library
			#pragma prefer_hlslcc gles
			#pragma exclude_renderers d3d11_9x
			#pragma target 2.0

			#pragma vertex vert
			#pragma fragment frag

			float4 _MainTex_ST;

		// Defines generated by graph

		#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Core.hlsl"
		#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/MetaInput.hlsl"
		#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/ShaderGraphFunctions.hlsl"
		#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"

		#pragma shader_feature _ _SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A

			CBUFFER_START(UnityPerMaterial)
		float Vector1_74F4E271;
		float Vector1_4182E992;
		float Vector1_BB18E434;
		float4 Color_4F618B2B;
		float Vector1_6FB2EAA5;
		CBUFFER_END

		TEXTURE2D(Texture2D_FC0D8A1E); SAMPLER(samplerTexture2D_FC0D8A1E); float4 Texture2D_FC0D8A1E_TexelSize;
		SAMPLER(_SampleTexture2D_B7C57FA6_Sampler_3_Linear_Repeat);
		struct VertexDescriptionInputs
		{
			float3 ObjectSpacePosition;
		};

		struct SurfaceDescriptionInputs
		{
			float3 TangentSpaceNormal;
			half4 uv0;
			float3 TimeParameters;
		};


		void Unity_Multiply_float(float A, float B, out float Out)
		{
			Out = A * B;
		}

		void Unity_Twirl_float(float2 UV, float2 Center, float Strength, float2 Offset, out float2 Out)
		{
			float2 delta = UV - Center;
			float angle = Strength * length(delta);
			float x = cos(angle) * delta.x - sin(angle) * delta.y;
			float y = sin(angle) * delta.x + cos(angle) * delta.y;
			Out = float2(x + Center.x + Offset.x, y + Center.y + Offset.y);
		}


	inline float2 Unity_Voronoi_RandomVector_float(float2 UV, float offset)
	{
		float2x2 m = float2x2(15.27, 47.63, 99.41, 89.98);
		UV = frac(sin(mul(UV, m)) * 46839.32);
		return float2(sin(UV.y*+offset)*0.5 + 0.5, cos(UV.x*offset)*0.5 + 0.5);
	}

		void Unity_Voronoi_float(float2 UV, float AngleOffset, float CellDensity, out float Out, out float Cells)
		{
			float2 g = floor(UV * CellDensity);
			float2 f = frac(UV * CellDensity);
			float t = 8.0;
			float3 res = float3(8.0, 0.0, 0.0);

			for (int y = -1; y <= 1; y++)
			{
				for (int x = -1; x <= 1; x++)
				{
					float2 lattice = float2(x,y);
					float2 offset = Unity_Voronoi_RandomVector_float(lattice + g, AngleOffset);
					float d = distance(lattice + offset, f);

					if (d < res.x)
					{
						res = float3(d, offset.x, offset.y);
						Out = res.x;
						Cells = res.y;
					}
				}
			}
		}

		void Unity_Power_float(float A, float B, out float Out)
		{
			Out = pow(A, B);
		}

		void Unity_Multiply_float(float4 A, float4 B, out float4 Out)
		{
			Out = A * B;
		}

		struct VertexDescription
		{
			float3 Position;
		};

		VertexDescription PopulateVertexData(VertexDescriptionInputs IN)
		{
			VertexDescription description = (VertexDescription)0;
			description.Position = IN.ObjectSpacePosition;
			return description;
		}

		struct SurfaceDescription
		{
			float3 Albedo;
			float3 Emission;
			float Alpha;
			float AlphaClipThreshold;
		};

		SurfaceDescription PopulateSurfaceData(SurfaceDescriptionInputs IN)
		{
			SurfaceDescription surface = (SurfaceDescription)0;
			float4 _Property_50B20D45_Out_0 = Color_4F618B2B;
			float4 _SampleTexture2D_B7C57FA6_RGBA_0 = SAMPLE_TEXTURE2D(Texture2D_FC0D8A1E, samplerTexture2D_FC0D8A1E, IN.uv0.xy);
			float _SampleTexture2D_B7C57FA6_R_4 = _SampleTexture2D_B7C57FA6_RGBA_0.r;
			float _SampleTexture2D_B7C57FA6_G_5 = _SampleTexture2D_B7C57FA6_RGBA_0.g;
			float _SampleTexture2D_B7C57FA6_B_6 = _SampleTexture2D_B7C57FA6_RGBA_0.b;
			float _SampleTexture2D_B7C57FA6_A_7 = _SampleTexture2D_B7C57FA6_RGBA_0.a;
			float _Property_73149802_Out_0 = Vector1_74F4E271;
			float _Property_2CFDFD71_Out_0 = Vector1_BB18E434;
			float _Multiply_8FB1196F_Out_2;
			Unity_Multiply_float(_Property_2CFDFD71_Out_0, IN.TimeParameters.x, _Multiply_8FB1196F_Out_2);
			float2 _Twirl_2C42DB4_Out_4;
			Unity_Twirl_float(IN.uv0.xy, float2 (0.5, 0.5), _Property_73149802_Out_0, (_Multiply_8FB1196F_Out_2.xx), _Twirl_2C42DB4_Out_4);
			float _Property_4B2CC386_Out_0 = Vector1_4182E992;
			float _Voronoi_DD250263_Out_3;
			float _Voronoi_DD250263_Cells_4;
			Unity_Voronoi_float(_Twirl_2C42DB4_Out_4, 2, _Property_4B2CC386_Out_0, _Voronoi_DD250263_Out_3, _Voronoi_DD250263_Cells_4);
			float _Power_DE91011A_Out_2;
			Unity_Power_float(_Voronoi_DD250263_Cells_4, _Voronoi_DD250263_Out_3, _Power_DE91011A_Out_2);
			float4 _Multiply_6A6BEFF8_Out_2;
			Unity_Multiply_float(_SampleTexture2D_B7C57FA6_RGBA_0, (_Power_DE91011A_Out_2.xxxx), _Multiply_6A6BEFF8_Out_2);
			float4 _Multiply_EFDBC6F2_Out_2;
			Unity_Multiply_float(_Property_50B20D45_Out_0, _Multiply_6A6BEFF8_Out_2, _Multiply_EFDBC6F2_Out_2);
			surface.Albedo = IsGammaSpace() ? float3(1, 1, 1) : SRGBToLinear(float3(1, 1, 1));
			surface.Emission = (_Multiply_EFDBC6F2_Out_2.xyz);
			surface.Alpha = (_Multiply_EFDBC6F2_Out_2).x;
			surface.AlphaClipThreshold = 0.5;
			return surface;
		}

		struct GraphVertexInput
		{
			float4 vertex : POSITION;
			float3 normal : NORMAL;
			float4 tangent : TANGENT;
			float4 texcoord0 : TEXCOORD0;
			float4 texcoord1 : TEXCOORD1;
			UNITY_VERTEX_INPUT_INSTANCE_ID
		};


		struct VertexOutput
		{
			float2 uv           : TEXCOORD0;
			float4 clipPos      : SV_POSITION;
			// Interpolators defined by graph
			float3 WorldSpacePosition : TEXCOORD3;
			float3 WorldSpaceNormal : TEXCOORD4;
			float3 WorldSpaceTangent : TEXCOORD5;
			float3 WorldSpaceBiTangent : TEXCOORD6;
			float3 WorldSpaceViewDirection : TEXCOORD7;
			half4 uv0 : TEXCOORD8;
			half4 uv1 : TEXCOORD9;

			UNITY_VERTEX_INPUT_INSTANCE_ID
			UNITY_VERTEX_OUTPUT_STEREO
		};

		VertexOutput vert(GraphVertexInput v)
		{
			VertexOutput o = (VertexOutput)0;
			UNITY_SETUP_INSTANCE_ID(v);
			UNITY_TRANSFER_INSTANCE_ID(v, o);
			UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

			// Vertex transformations performed by graph
			float3 WorldSpacePosition = mul(UNITY_MATRIX_M,v.vertex).xyz;
			float3 WorldSpaceNormal = normalize(mul(v.normal,(float3x3)UNITY_MATRIX_I_M));
			float3 WorldSpaceTangent = normalize(mul((float3x3)UNITY_MATRIX_M,v.tangent.xyz));
			float3 WorldSpaceBiTangent = cross(WorldSpaceNormal, WorldSpaceTangent.xyz) * v.tangent.w;
			float3 WorldSpaceViewDirection = _WorldSpaceCameraPos.xyz - mul(GetObjectToWorldMatrix(), float4(v.vertex.xyz, 1.0)).xyz;
			float4 uv0 = v.texcoord0;
			float4 uv1 = v.texcoord1;
			float3 ObjectSpacePosition = mul(UNITY_MATRIX_I_M,float4(WorldSpacePosition,1.0)).xyz;


			// Vertex shader outputs defined by graph
			o.WorldSpacePosition = WorldSpacePosition;
			o.WorldSpaceNormal = WorldSpaceNormal;
			o.WorldSpaceTangent = WorldSpaceTangent;
			o.WorldSpaceBiTangent = WorldSpaceBiTangent;
			o.WorldSpaceViewDirection = WorldSpaceViewDirection;
			o.uv0 = uv0;
			o.uv1 = uv1;

			o.clipPos = MetaVertexPosition(v.vertex, uv1, uv1, unity_LightmapST, unity_DynamicLightmapST);
			return o;
		}

		half4 frag(VertexOutput IN) : SV_TARGET
		{
			UNITY_SETUP_INSTANCE_ID(IN);
			UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);

			// Pixel transformations performed by graph
			float3 WorldSpacePosition = IN.WorldSpacePosition;
			float3 WorldSpaceNormal = IN.WorldSpaceNormal;
			float3 WorldSpaceTangent = IN.WorldSpaceTangent;
			float3 WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
			float3 WorldSpaceViewDirection = IN.WorldSpaceViewDirection;
			float3x3 tangentSpaceTransform = float3x3(WorldSpaceTangent,WorldSpaceBiTangent,WorldSpaceNormal);
			float4 uv0 = IN.uv0;
			float4 uv1 = IN.uv1;
			float3 TangentSpaceNormal = mul(WorldSpaceNormal,(float3x3)tangentSpaceTransform).xyz;

			SurfaceDescriptionInputs surfaceInput = (SurfaceDescriptionInputs)0;

			// Surface description inputs defined by graph
			surfaceInput.TangentSpaceNormal = TangentSpaceNormal;
			surfaceInput.uv0 = uv0;
			surfaceInput.TimeParameters = _TimeParameters.xyz;

			SurfaceDescription surf = PopulateSurfaceData(surfaceInput);

			float3 Albedo = float3(0.5, 0.5, 0.5);
			float3 Emission = 0;
			float Alpha = 1;
			float AlphaClipThreshold = 0;

			// Surface description remap performed by graph
			Albedo = surf.Albedo;
			Emission = surf.Emission;
			Alpha = surf.Alpha;
			AlphaClipThreshold = surf.AlphaClipThreshold;

	 #if _AlphaClip
			clip(Alpha - AlphaClipThreshold);
	#endif

			MetaInput metaInput = (MetaInput)0;
			metaInput.Albedo = Albedo;
			metaInput.Emission = Emission;

			return MetaFragment(metaInput);
		}
		ENDHLSL
	}
	Pass
	{
		Tags{"LightMode" = "Lightweight2D"}

		// Material options generated by graph

		Blend SrcAlpha OneMinusSrcAlpha, One OneMinusSrcAlpha

		Cull Off

		ZTest LEqual

		ZWrite Off

		HLSLPROGRAM
			// Required to compile gles 2.0 with standard srp library
			#pragma enable_d3d11_debug_symbols
			#pragma prefer_hlslcc gles
			#pragma exclude_renderers d3d11_9x
			#pragma target 2.0

			#pragma vertex vert
			#pragma fragment frag

			// Defines generated by graph

			#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Core.hlsl"
			#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Lighting.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/UnityInstancing.hlsl"
			#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/ShaderGraphFunctions.hlsl"

			CBUFFER_START(UnityPerMaterial)
			float Vector1_74F4E271;
			float Vector1_4182E992;
			float Vector1_BB18E434;
			float4 Color_4F618B2B;
			float Vector1_6FB2EAA5;
			CBUFFER_END

			TEXTURE2D(Texture2D_FC0D8A1E); SAMPLER(samplerTexture2D_FC0D8A1E); float4 Texture2D_FC0D8A1E_TexelSize;
			SAMPLER(_SampleTexture2D_B7C57FA6_Sampler_3_Linear_Repeat);
			struct VertexDescriptionInputs
			{
				float3 ObjectSpacePosition;
			};

			struct SurfaceDescriptionInputs
			{
				float3 TangentSpaceNormal;
				half4 uv0;
				float3 TimeParameters;
			};


			void Unity_Multiply_float(float A, float B, out float Out)
			{
				Out = A * B;
			}

			void Unity_Twirl_float(float2 UV, float2 Center, float Strength, float2 Offset, out float2 Out)
			{
				float2 delta = UV - Center;
				float angle = Strength * length(delta);
				float x = cos(angle) * delta.x - sin(angle) * delta.y;
				float y = sin(angle) * delta.x + cos(angle) * delta.y;
				Out = float2(x + Center.x + Offset.x, y + Center.y + Offset.y);
			}


		inline float2 Unity_Voronoi_RandomVector_float(float2 UV, float offset)
		{
			float2x2 m = float2x2(15.27, 47.63, 99.41, 89.98);
			UV = frac(sin(mul(UV, m)) * 46839.32);
			return float2(sin(UV.y*+offset)*0.5 + 0.5, cos(UV.x*offset)*0.5 + 0.5);
		}

			void Unity_Voronoi_float(float2 UV, float AngleOffset, float CellDensity, out float Out, out float Cells)
			{
				float2 g = floor(UV * CellDensity);
				float2 f = frac(UV * CellDensity);
				float t = 8.0;
				float3 res = float3(8.0, 0.0, 0.0);

				for (int y = -1; y <= 1; y++)
				{
					for (int x = -1; x <= 1; x++)
					{
						float2 lattice = float2(x,y);
						float2 offset = Unity_Voronoi_RandomVector_float(lattice + g, AngleOffset);
						float d = distance(lattice + offset, f);

						if (d < res.x)
						{
							res = float3(d, offset.x, offset.y);
							Out = res.x;
							Cells = res.y;
						}
					}
				}
			}

			void Unity_Power_float(float A, float B, out float Out)
			{
				Out = pow(A, B);
			}

			void Unity_Multiply_float(float4 A, float4 B, out float4 Out)
			{
				Out = A * B;
			}

			struct VertexDescription
			{
				float3 Position;
			};

			VertexDescription PopulateVertexData(VertexDescriptionInputs IN)
			{
				VertexDescription description = (VertexDescription)0;
				description.Position = IN.ObjectSpacePosition;
				return description;
			}

			struct SurfaceDescription
			{
				float3 Albedo;
				float3 Normal;
				float3 Emission;
				float Metallic;
				float Smoothness;
				float Occlusion;
				float Alpha;
				float AlphaClipThreshold;
			};

			SurfaceDescription PopulateSurfaceData(SurfaceDescriptionInputs IN)
			{
				SurfaceDescription surface = (SurfaceDescription)0;
				float4 _Property_50B20D45_Out_0 = Color_4F618B2B;
				float4 _SampleTexture2D_B7C57FA6_RGBA_0 = SAMPLE_TEXTURE2D(Texture2D_FC0D8A1E, samplerTexture2D_FC0D8A1E, IN.uv0.xy);
				float _SampleTexture2D_B7C57FA6_R_4 = _SampleTexture2D_B7C57FA6_RGBA_0.r;
				float _SampleTexture2D_B7C57FA6_G_5 = _SampleTexture2D_B7C57FA6_RGBA_0.g;
				float _SampleTexture2D_B7C57FA6_B_6 = _SampleTexture2D_B7C57FA6_RGBA_0.b;
				float _SampleTexture2D_B7C57FA6_A_7 = _SampleTexture2D_B7C57FA6_RGBA_0.a;
				float _Property_73149802_Out_0 = Vector1_74F4E271;
				float _Property_2CFDFD71_Out_0 = Vector1_BB18E434;
				float _Multiply_8FB1196F_Out_2;
				Unity_Multiply_float(_Property_2CFDFD71_Out_0, IN.TimeParameters.x, _Multiply_8FB1196F_Out_2);
				float2 _Twirl_2C42DB4_Out_4;
				Unity_Twirl_float(IN.uv0.xy, float2 (0.5, 0.5), _Property_73149802_Out_0, (_Multiply_8FB1196F_Out_2.xx), _Twirl_2C42DB4_Out_4);
				float _Property_4B2CC386_Out_0 = Vector1_4182E992;
				float _Voronoi_DD250263_Out_3;
				float _Voronoi_DD250263_Cells_4;
				Unity_Voronoi_float(_Twirl_2C42DB4_Out_4, 2, _Property_4B2CC386_Out_0, _Voronoi_DD250263_Out_3, _Voronoi_DD250263_Cells_4);
				float _Power_DE91011A_Out_2;
				Unity_Power_float(_Voronoi_DD250263_Cells_4, _Voronoi_DD250263_Out_3, _Power_DE91011A_Out_2);
				float4 _Multiply_6A6BEFF8_Out_2;
				Unity_Multiply_float(_SampleTexture2D_B7C57FA6_RGBA_0, (_Power_DE91011A_Out_2.xxxx), _Multiply_6A6BEFF8_Out_2);
				float4 _Multiply_EFDBC6F2_Out_2;
				Unity_Multiply_float(_Property_50B20D45_Out_0, _Multiply_6A6BEFF8_Out_2, _Multiply_EFDBC6F2_Out_2);
				surface.Albedo = IsGammaSpace() ? float3(1, 1, 1) : SRGBToLinear(float3(1, 1, 1));
				surface.Normal = IN.TangentSpaceNormal;
				surface.Emission = (_Multiply_EFDBC6F2_Out_2.xyz);
				surface.Metallic = 0;
				surface.Smoothness = 0.5;
				surface.Occlusion = 1;
				surface.Alpha = (_Multiply_EFDBC6F2_Out_2).x;
				surface.AlphaClipThreshold = 0.5;
				return surface;
			}

			struct GraphVertexInput
			{
				float4 vertex : POSITION;
				float3 normal : NORMAL;
				float4 tangent : TANGENT;
				float4 texcoord0 : TEXCOORD0;
				float4 texcoord1 : TEXCOORD1;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};


			struct GraphVertexOutput
			{
				float4 clipPos                : SV_POSITION;
				// Interpolators defined by graph
				float3 WorldSpacePosition : TEXCOORD3;
				float3 WorldSpaceNormal : TEXCOORD4;
				float3 WorldSpaceTangent : TEXCOORD5;
				float3 WorldSpaceBiTangent : TEXCOORD6;
				float3 WorldSpaceViewDirection : TEXCOORD7;
				half4 uv0 : TEXCOORD8;
				half4 uv1 : TEXCOORD9;

			};

			GraphVertexOutput vert(GraphVertexInput v)
			{
				GraphVertexOutput o = (GraphVertexOutput)0;

				// Vertex transformations performed by graph
				float3 WorldSpacePosition = mul(UNITY_MATRIX_M,v.vertex).xyz;
				float3 WorldSpaceNormal = normalize(mul(v.normal,(float3x3)UNITY_MATRIX_I_M));
				float3 WorldSpaceTangent = normalize(mul((float3x3)UNITY_MATRIX_M,v.tangent.xyz));
				float3 WorldSpaceBiTangent = cross(WorldSpaceNormal, WorldSpaceTangent.xyz) * v.tangent.w;
				float3 WorldSpaceViewDirection = _WorldSpaceCameraPos.xyz - mul(GetObjectToWorldMatrix(), float4(v.vertex.xyz, 1.0)).xyz;
				float4 uv0 = v.texcoord0;
				float4 uv1 = v.texcoord1;
				float3 ObjectSpacePosition = mul(UNITY_MATRIX_I_M,float4(WorldSpacePosition,1.0)).xyz;

				VertexDescriptionInputs vdi = (VertexDescriptionInputs)0;

				// Vertex description inputs defined by graph
				vdi.ObjectSpacePosition = ObjectSpacePosition;

				VertexDescription vd = PopulateVertexData(vdi);
				v.vertex.xyz = vd.Position;

				// Vertex shader outputs defined by graph
				o.WorldSpacePosition = WorldSpacePosition;
				o.WorldSpaceNormal = WorldSpaceNormal;
				o.WorldSpaceTangent = WorldSpaceTangent;
				o.WorldSpaceBiTangent = WorldSpaceBiTangent;
				o.WorldSpaceViewDirection = WorldSpaceViewDirection;
				o.uv0 = uv0;
				o.uv1 = uv1;


				VertexPositionInputs vertexInput = GetVertexPositionInputs(v.vertex.xyz);
				o.clipPos = vertexInput.positionCS;

				return o;
			}

			half4 frag(GraphVertexOutput IN) : SV_Target
			{
				// Pixel transformations performed by graph
				float3 WorldSpacePosition = IN.WorldSpacePosition;
				float3 WorldSpaceNormal = IN.WorldSpaceNormal;
				float3 WorldSpaceTangent = IN.WorldSpaceTangent;
				float3 WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
				float3 WorldSpaceViewDirection = IN.WorldSpaceViewDirection;
				float3x3 tangentSpaceTransform = float3x3(WorldSpaceTangent,WorldSpaceBiTangent,WorldSpaceNormal);
				float4 uv0 = IN.uv0;
				float4 uv1 = IN.uv1;
				float3 TangentSpaceNormal = mul(WorldSpaceNormal,(float3x3)tangentSpaceTransform).xyz;

				SurfaceDescriptionInputs surfaceInput = (SurfaceDescriptionInputs)0;

				// Surface description inputs defined by graph
				surfaceInput.TangentSpaceNormal = TangentSpaceNormal;
				surfaceInput.uv0 = uv0;
				surfaceInput.TimeParameters = _TimeParameters.xyz;

				SurfaceDescription surf = PopulateSurfaceData(surfaceInput);

				float3 Albedo = float3(0.5, 0.5, 0.5);
				float3 Specular = float3(0, 0, 0);
				float Metallic = 1;
				float3 Normal = float3(0, 0, 1);
				float3 Emission = 0;
				float Smoothness = 0.5;
				float Occlusion = 1;
				float Alpha = 1;
				float AlphaClipThreshold = 0;

				// Surface description remap performed by graph
				Albedo = surf.Albedo;
				Normal = surf.Normal;
				Emission = surf.Emission;
				Metallic = surf.Metallic;
				Smoothness = surf.Smoothness;
				Occlusion = surf.Occlusion;
				Alpha = surf.Alpha;
				AlphaClipThreshold = surf.AlphaClipThreshold;


				// Computes fog factor per-vertex
				half4 color = half4(Albedo, Alpha);

		#if _AlphaClip
				clip(Alpha - AlphaClipThreshold);
		#endif
				return color;
			}

			ENDHLSL
		}
}
CustomEditor "UnityEditor.ShaderGraph.PBRMasterGUI"
FallBack "Hidden/InternalErrorShader"
}
